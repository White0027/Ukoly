#include <iostream>
#include <iomanip>
using namespace std;

int** initMatrix(int rows, int cols);
void printMatrix(int** matrix, int rows, int cols);
int** soucetMatrix(int** matrix1, int** matrix2, int rows1, int cols1, int rows2, int cols2);
int** nasobeniMatrix(int** matrix1, int** matrix2, int rows1, int cols1, int rows2, int cols2);

int main()
{
    int rows1, cols1;
    cout << "Zadej pocet radku 1. matice: ";
    cin >> rows1;
    cout << "Zadej pocet sloupcu 1. matice: ";
    cin >> cols1;

    int** matrix1 = initMatrix(rows1, cols1);
    printMatrix(matrix1, rows1, cols1);

    int rows2, cols2;
    cout << "Zadej pocet radku 2. matice: ";
    cin >> rows2;
    cout << "Zadej pocet sloupcu 2. matice: ";
    cin >> cols2;

    int** matrix2 = initMatrix(rows2, cols2);
    printMatrix(matrix2, rows2, cols2);

    int** sumMatrix = soucetMatrix(matrix1, matrix2, rows1, cols1, rows2, cols2);
    int** productMatrix = nasobeniMatrix(matrix1, matrix2, rows1, cols1, rows2, cols2);

    cout << "Matice souctu:" << endl;
    if (sumMatrix) {
        printMatrix(sumMatrix, rows1, cols1);
    }
    else {
        cout << "\n Spocitej si to sam :P\n" << endl;
    }

    cout << "Matice nasobeni:" << endl;
    if (productMatrix) {
        printMatrix(productMatrix, rows1, cols2);
    }
    else {
        cout << "\n Spocitej si to sam :P\n" << endl;
    }
	
    for (int i = 0; i < rows1; i++)
    {
        delete[] matrix1[i];
    }
    delete[] matrix1;

    for (int i = 0; i < rows2; i++)
    {
        delete[] matrix2[i];
    }
    delete[] matrix2;

    if (sumMatrix) {
        for (int i = 0; i < rows1; i++)
        {
            delete[] sumMatrix[i];
        }
        delete[] sumMatrix;
    }

    if (productMatrix) {
        for (int i = 0; i < rows1; i++)
        {
            delete[] productMatrix[i];
        }
        delete[] productMatrix;
    }

    return 0;
}

int** initMatrix(int rows, int cols)
{
    int** matrix = new int* [rows];
    for (int i = 0; i < rows; i++)
    {
        matrix[i] = new int[cols];
        for (int j = 0; j < cols; j++)
        {
            matrix[i][j] = rand() % 10;
        }
    }
    return matrix;
}

int** soucetMatrix(int** matrix1, int** matrix2, int rows1, int cols1, int rows2, int cols2)
{
    if (rows1 != rows2 || cols1 != cols2)
    {
        return nullptr;
    }
    int** result = new int* [rows1];
    for (int i = 0; i < rows1; i++)
    {
        result[i] = new int[cols1];
        for (int j = 0; j < cols1; j++)
        {
            result[i][j] = matrix1[i][j] + matrix2[i][j];
        }
    }
    return result;
}

int** nasobeniMatrix(int** matrix1, int** matrix2, int rows1, int cols1, int rows2, int cols2)
{
    if (cols1 != rows2)
    {
        return nullptr;
    }
    int** result = new int* [rows1];
    for (int i = 0; i < rows1; i++)
    {
        result[i] = new int[cols2];
        for (int j = 0; j < cols2; j++)
        {
            result[i][j] = 0;
            for (int k = 0; k < cols1; k++)
            {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }
    return result;
}

void printMatrix(int** matrix, int rows, int cols)
{
    cout << "Matice:" << endl;
    for (int i = 0; i < rows; i++)
    {
        cout << "|";
        for (int j = 0; j < cols; j++)
        {
            cout << setw(4) << matrix[i][j];
        }
        cout << " |" << endl;
    }
}
